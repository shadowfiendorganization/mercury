<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.atlandes.auth.dao.UserMapper">

    <resultMap id="BaseResultMap" type="com.atlandes.auth.po.User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="nickname" property="nickname" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="last_login_time" property="lastLoginTime" jdbcType="TIMESTAMP"/>
        <result column="status" property="status" jdbcType="SMALLINT"/>
    </resultMap>

    <sql id="Base_Column_List">
        nickname, id, email, password, create_time, last_login_time, status
    </sql>

    <sql id="limit_sql">
        <if test="page_sql != null and page_sql != ''">
            ${page_sql}
        </if>
    </sql>

    <sql id="where_all">
        <where>
            <if test="findContent != null and findContent !='' ">
                and (
                LOWER(nickname) like LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%")) or
                LOWER(email) like LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%"))
                )
            </if>
        </where>
    </sql>

    <select id="findAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from auth_user
        <include refid="where_all"/>
        <include refid="limit_sql"/>
    </select>

    <select id="findCount" resultMap="BaseResultMap">
        select count(id) from auth_user
        <include refid="where_all"/>
    </select>

    <!-- 用户权限分配的分页查询 -->
    <select id="findUserAndRole" resultType="com.atlandes.auth.bo.RoleAllocationBO">
        select u.id,u.nickname,u.email,u.create_time,u.last_login_time,u.status ,group_concat(ur.name)
        roleNames,group_concat(ur.id)roleIds from
        auth_user u
        left join auth_re_user_and_role uur on uur.uid = u.id
        left join auth_role ur on ur.id = uur.rid
        <where>
            <if test="findContent != null and findContent !='' ">
                and (
                LOWER(u.nickname) like LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%")) or
                LOWER(u.email) like LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%"))
                )
            </if>
        </where>
        group by u.id
    </select>

    <select id="selectRoleByUserId" resultType="com.atlandes.auth.bo.UserBO">
        SELECT
            ur.id,
            ur.name,
            ur.type,
            ifnull(uu.id, 0) AS marker,
            uu.id            AS userId
        FROM auth_role ur
            LEFT JOIN auth_re_user_and_role uur ON uur.rid = ur.id
            LEFT JOIN (SELECT id
                       FROM auth_user
                       WHERE id = #{id,jdbcType=BIGINT}) uu ON uu.id = uur.uid
        GROUP BY ur.id
    </select>

    <!-- 登录 -->
    <select id="login" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from auth_user
        where email = #{email,jdbcType=VARCHAR} and password = #{password,jdbcType=VARCHAR}
    </select>

    <!-- 根据邮箱|帐号查询 -->
    <select id="findUserByEmail" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from auth_user
        where email = #{email,jdbcType=VARCHAR}
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from auth_user
        where id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM auth_user
        WHERE id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.atlandes.auth.po.User">
        INSERT INTO auth_user (
            id,
            nickname,
            email,
            password,
            create_time,
            last_login_time,
            status
        ) VALUES (
            #{id,jdbcType=BIGINT},
            #{nickname,jdbcType=VARCHAR},
            #{email,jdbcType=VARCHAR},
            #{password,jdbcType=VARCHAR},
            #{createTime,jdbcType=TIMESTAMP},
            #{lastLoginTime,jdbcType=TIMESTAMP},
            #{status,jdbcType=BIGINT}
        )
    </insert>

    <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.atlandes.auth.po.User">
        insert into auth_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="nickname != null">
                nickname,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="lastLoginTime != null">
                last_login_time,
            </if>
            <if test="status != null">
                status,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="nickname != null">
                #{nickname,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="lastLoginTime != null">
                #{lastLoginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                #{status,jdbcType=BIGINT}
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.atlandes.auth.po.User">
        update auth_user
        <set>
            <if test="nickname != null">
                nickname = #{nickname,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="lastLoginTime != null">
                last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.atlandes.auth.po.User">
        UPDATE auth_user
        SET nickname        = #{nickname,jdbcType=VARCHAR},
            email           = #{email,jdbcType=VARCHAR},
            password        = #{password,jdbcType=VARCHAR},
            create_time     = #{createTime,jdbcType=TIMESTAMP},
            last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
            status          = #{status,jdbcType=BIGINT}
        WHERE id = #{id,jdbcType=BIGINT}
    </update>

</mapper>
